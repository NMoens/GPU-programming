## Kokkos views

View = $N$-dimentional arrays

- contains
  - basic types (`int`, `float`, `double`,...)
  - `struct` of basic types
- in memory space of host or device
- memory layout can be controled, sane defaults
- managed by reference counting


## Views examples

```c++
Kokkos::View<double*> a("a", 10);                      // <1>
Kokkos::View<double[5]> b("b");                        // <2>
Kokkos::View<doucle**> c("c", 10, 15);                 // <3>
Kokkos::View<double*[20]> d("d", 10);                  // <4>
Kokkos::View<double[7][9]> e("e");                     // <5>
Kokkos::View<double***> f("f", 10, 10, 10);            // <6>
Kokkos::View<double*[13][17]> f("f", 10);              // <7>
```

1. 1D array of 10 elements, runtime
2. 1D array of 5 elements, compile time
3. 2D array of 10x15 elements, runtime
4. 2D array of 10x20 elements, rows runtime
5. 2D array of 7x9 elements, compile time
6. 3D array of 10x10x10 elements, runtime
7. 3D array of 10x13x17 elements, first dimension runtime


## Accessing views

Views can be accessed using `operator()` with indices

```c++
a(0) = 1.0;
auto x {a(1) + b(2)};
c(2, 3) = 3.0;
f(8, 9, 10) = 6.0;
```


## Views and memory spaces

- By default in the default execution space
- Can be placed in host or device memory space
  - `Kokkos::HostSpace` on host
  - `Kokkos::CudaSpace` on CUDA device
  - `Kokkos::CudaUVMSpace` in [CUDA UVM]^(Unified Virtual Memory)
  - `Kokkos::HipSpace` on HIP device

::: {.callout-warning .fragment}
Can only be accessed in execution space associated with memory space
:::


## Memory layout

Two main memory layouts

- `Kokkos::LayoutLeft` = column-major
- `Kokkos::LayoutRight` = row-major

::: {.fragment}
Example:

```c++
Kokkos::View<double**, Kokkos::LayoutLeft> a("a", 10, 15);
Kokkos::View<double**, Kokkos::LayoutRight> b("b", 10, 15);
```
:::

::: {.fragment}
Default "best" for memory space, parallel access over leftmost index

- Left for device memory spaces: coalesced memory access
- Right for host memory space: cache-friendly access
:::


## Deep copy

- Copy data between views
- Bit copy, no conversion
  - views must have the same layout and padding
- Execution space can be specified

::: {.callout-warning .fragment}
`Kokkos::deep_copy` between different memory spaces may not work
:::


## Mirror views

Required for, e.g.,

- initlizing views from file
- writing views to file
- non-paralellizable operations

::: {.fragment}
```c++
Kokkos::View<double*> a("a", 10);
auto a_host = Kokkos::create_mirror(a);             // <1>
Kokkos::deep_copy(a_host, a);                       // <2>
```

1. Create a mirror view on host
2. Copy data from device to host
:::

::: {.fragment}
Takes care of layout differences
:::


## Memory traits

- `Kokkos::RandomAccess` = random access to view's elements
  - if view is `const` and `CudaSpace`, use texture memory/fetch
  - no other memory spaces take advantage
- `Kokkos::Atomic` = all operations on view's elements are atomic
- Combine traits: use`|`


## Using memory traits

```c++
Kokkos::View<int*> a("a" , 100);                                                // <1>
Kokkos::View<int*, Kokkos::MemoryTraits<Kokkos::Atomic> > a_atomic = a;         // <2>
    
a_atomic(1)++;                                                                  // <3>
```

1. Create ordinary view
2. Create atomic view from ordinary view
3. All operations on `a_atomic` are atomic

::: notes
Texture memroy has shorter cache lines, better for random access.
:::


## Scatter views

Implementation execution space dependent

- On GPUs: atomic
- On CPUs: data replication

::: {.fragment style="font-size: 80%"}
```c++
#include <Kokkos_ScatterView.hpp>                                         // <1>
...
Kokkos::View<int*> distance("distance", 2 * max_steps + 1);
Kokkos::deep_copy(distance, 0);
Kokkos::Experimental::ScatterView<int*> distance_scatter_view(distance);  // <2>

Kokkos::parallel_for(
    "walks", nr_walks, KOKKOS_LAMBDA(const int walk) {
      auto distance_access = distance_scatter_view.access();              // <3>
      int pos = max_steps;
      for (int step = 0; step < nr_steps; ++step) {
        update_position(pos)
      }
      distance_access(pos)++;                                            // <4>
    });
    Kokkos::experimental::contribute(distance, distance_scatter_view);   // <5>
```

1. Include specific header file
2. Create scatter view from ordinary view
3. Create access to scatter view
4. Access scatter view as ordinary view, but no race conditions
5. Contribute data back to ordinary view (no-op for atomic implementation)
:::

::: notes
When running with few threads (<= 16) on CPUs, data replication is more efficient.
Each thread has its own copy of `distance`, and they are aggregated at the end of
the parallel region.

Since this doesn't scale to large numbers of threads, atomic operations are used on GPUs.

`Kokkos::Experimental::ScatterView` will be compiled to the appropriate implementation
depending on the execution space.

Out of the box only supports `+=` and `-=`, however, undocumented support for other
operations is available via template arguments.
:::


## Don't duplicate

- Creating scatter view  is expensive
- Do it once, reuse
- Sync scatter view with ordinary view using `reset`

::: {.fragment style="font-size: 80%"}
```c++
void compute_distances(Kokkos::Experimental::ScatterView<int*>& distances, // <1>
                       const int nr_walks, const int nr_steps,
                       const int max_steps) {
  distance_scatter_view.reset();                                           // <2>
  Kokkos::parallel_for(
    "walks", nr_walks, KOKKOS_LAMBDA(const int walk) {
      auto distance_access = distance_scatter_view.access();               // <3>
      int pos = max_steps;
      for (int step = 0; step < nr_steps; ++step) {
        update_position(pos)
      }
      distance_access(pos)++;                                              // <4>
    });
  Kokkos::experimental::contribute(distance, distance_scatter_view);       // <5>
}
```

1. Pass scatter view as argument
2. Reset scatter view
3. Create access to scatter view
4. Access scatter view as ordinary view, but no race conditions
5. Contribute data back to ordinary view (no-op for atomic implementation)
:::


## Unmanaged views

- Useful for interfacing with external libraries
- Views that do not manage memory
- Can be created from raw pointers
- No reference counting


## Subviews

- Similar to Fortran, MATLAB, Python slicing
- Kokkos has no strided slices
- Subviews are views
- Same reference count as original view

::: {.fragment}
```c++
Kokkos::View<double**> a("a", 10, 15);
auto b = Kokkos::subview(a, Kokkos::ALL, std::make_pair(2, 5));             // <1>
```
:::


## Porting to Kokkos

::: {.callout-tip}
`Kokkos::DualView` helps porting
:::

::: {.fragment style="font-size: 80%"}
- View that holds data on host and device
- Can be used as a single view
- `modify` and `sync` methods
:::

::: {.callout-warning .fragment}
You are responsible for

- marking data as modified
- syncing data to relevant memory space
:::
